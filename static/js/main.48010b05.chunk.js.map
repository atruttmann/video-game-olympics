{"version":3,"sources":["components/Countdown/Countdown.js","components/Leaderboard.js","components/Achievements.js","components/Switch/Switch.js","components/Challenges.js","assets/logo.png","App.js","index.js"],"names":["Countdown","startTime","endTime","winner","useState","hours","setHours","minutes","setMinutes","seconds","setSeconds","customStatus","setCustomStatus","useEffect","updateClock","currentTime","Date","now","t","getTime","Math","floor","interval","setInterval","clearInterval","getFormattedTime","time","className","Leaderboard","leaderboard","getMedal","index","map","player","points","src","avatar","alt","name","lockedGames","Achievements","achievements","getPlayerAvatar","playerName","find","achievement","icon","description","currentHolder","Switch","toggleSwitch","children","type","onClick","Challenges","challenges","hideCompletedChallenges","setHideCompletedChallenges","hideCompletedGolds","setHideCompletedGolds","challenge","completed","bronzeWinner","completedGold","goldWinner","goldVal","silverVal","silverWinner","bronzeVal","parse","App","setLeaderboard","setAchievements","setChallenges","passwordInput","setPasswordInput","locked","setLocked","doc","GoogleSpreadsheet","creds","require","fetchData","a","useServiceAccountAuth","loadInfo","leaderboardSheet","sheetsByIndex","getRows","playerRows","row","Name","Points","Avatar","sort","b","achievementsSheet","achievementsRows","Description","Icon","challengesSheet","challengeRows","Logo","onChange","e","target","value","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48010b05.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Countdown.scss\";\n\nconst Countdown = ({ startTime, endTime, winner }) => {\n  const [hours, setHours] = useState();\n  const [minutes, setMinutes] = useState();\n  const [seconds, setSeconds] = useState();\n  const [customStatus, setCustomStatus] = useState(\" \");\n\n  useEffect(() => {\n    const updateClock = () => {\n      const currentTime = Date.now();\n\n      if (currentTime < startTime) {\n        setCustomStatus(\"Game has not started.\");\n      } else if (currentTime > endTime) {\n        setCustomStatus(`Game over!${winner ? ` ${winner} wins.` : \"\"}`);\n      } else {\n        const t = endTime - new Date().getTime();\n        const seconds = Math.floor((t / 1000) % 60);\n        const minutes = Math.floor((t / 1000 / 60) % 60);\n        const hours = Math.floor((t / (1000 * 60 * 60)) % 24);\n\n        setHours(hours);\n        setMinutes(minutes);\n        setSeconds(seconds);\n        setCustomStatus(null);\n      }\n    };\n\n    updateClock();\n    const interval = setInterval(updateClock, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [winner, startTime, endTime]);\n\n  const getFormattedTime = (time) => {\n    if (time < 10) return `0${time}`;\n    return time;\n  };\n\n  return (\n    <div className=\"countdown section\">\n      {customStatus ? (\n        <h2 className=\"customStatus\">{customStatus}</h2>\n      ) : (\n        <>\n          <div className=\"timeItem\">\n            <div className=\"time\">{getFormattedTime(hours)}</div>\n            Hours\n          </div>\n          <div className=\"timeItem\">\n            <div className=\"time\">{getFormattedTime(minutes)}</div>\n            Minutes\n          </div>\n          <div className=\"timeItem\">\n            <div className=\"time\">{getFormattedTime(seconds)}</div>\n            Seconds\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Countdown;\n","import React from \"react\";\nimport \"./TableStyles.scss\";\n\nconst Leaderboard = ({ leaderboard }) => {\n  const getMedal = (index) => {\n    switch (index) {\n      case 0:\n        return \"ðŸ¥‡\";\n      case 1:\n        return \"ðŸ¥ˆ\";\n      case 2:\n        return \"ðŸ¥‰\";\n      default:\n        return \"\";\n    }\n  };\n\n  return (\n    <div className=\"leaderboard section\">\n      <h2>Leaderboard</h2>\n      <div className=\"tableContainer\">\n        <table>\n          <thead>\n            <tr>\n              <th className=\"medal\" />\n              <th className=\"points\">Points</th>\n              <th>Player</th>\n              <th>ðŸ”’ Locked Games</th>\n            </tr>\n          </thead>\n          <tbody>\n            {leaderboard.map((player, index) => (\n              <tr key={player.name}>\n                <td className=\"medal\">\n                  {player.points > 0 && getMedal(index)}\n                </td>\n                <td className=\"alignCenter points\">{player.points}</td>\n                <td>\n                  <div className=\"flex\">\n                    <img className=\"avatar\" src={player.avatar} alt=\"\" />\n                    {player.name}\n                  </div>\n                </td>\n                <td className=\"small\">\n                  <i>{player.lockedGames}</i>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Leaderboard;\n","import React from \"react\";\nimport \"./TableStyles.scss\";\n\nconst Achievements = ({ achievements, leaderboard }) => {\n  const getPlayerAvatar = (playerName) => {\n    const player = leaderboard.find((player) => player.name === playerName);\n    if (player) return player.avatar;\n    return \"\";\n  };\n\n  return (\n    <div className=\"section\">\n      <h2>Achievements</h2>\n      <div className=\"tableContainer\">\n        <table>\n          <thead>\n            <tr>\n              <th>Description</th>\n              <th className=\"points\">Points</th>\n              <th>Current holder</th>\n            </tr>\n          </thead>\n          <tbody>\n            {achievements.map((achievement) => (\n              <tr key={achievement.description}>\n                <td>\n                  <div className=\"flex\">\n                    <img className=\"icon\" src={achievement.icon} alt=\"\" />\n                    {achievement.description}\n                  </div>\n                </td>\n                <td className=\"alignCenter points\">{achievement.points}</td>\n                <td>\n                  {achievement.currentHolder && (\n                    <div className=\"flex\">\n                      <img\n                        className=\"avatar\"\n                        src={getPlayerAvatar(achievement.currentHolder)}\n                        alt=\"\"\n                      />\n                      {achievement.currentHolder}\n                    </div>\n                  )}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Achievements;\n","import React from \"react\";\nimport \"./Switch.scss\";\n\nconst Switch = ({ toggleSwitch = () => {}, children }) => (\n  <div className=\"switchContainer\">\n    <label className=\"switch\">\n      <input type=\"checkbox\" onClick={() => toggleSwitch()} />\n      <span className=\"slider\" />\n    </label>\n    <span>{children}</span>\n  </div>\n);\n\nexport default Switch;\n","import React, { useState } from 'react';\nimport Switch from './Switch/Switch';\nimport './TableStyles.scss';\n\nconst Challenges = ({ challenges }) => {\n  const [hideCompletedChallenges, setHideCompletedChallenges] = useState(false);\n  const [hideCompletedGolds, setHideCompletedGolds] = useState(false);\n\n  return (\n    <div className=\"challenges section\">\n      <h2>Challenges</h2>\n      <div className=\"flex\">\n        <Switch\n          toggleSwitch={() =>\n            setHideCompletedChallenges(!hideCompletedChallenges)\n          }\n        >\n          Hide completed challenges\n        </Switch>\n        <Switch toggleSwitch={() => setHideCompletedGolds(!hideCompletedGolds)}>\n          Hide completed golds\n        </Switch>\n      </div>\n      <div className=\"tableContainer\">\n        <table>\n          <thead>\n            <tr>\n              <th>Challenge Name</th>\n              <th className=\"alignCenter\">ðŸ¥‡</th>\n              <th>Winner</th>\n              <th className=\"alignCenter\">ðŸ¥ˆ</th>\n              <th>Winner</th>\n              <th className=\"alignCenter\">ðŸ¥‰</th>\n              <th>Winner</th>\n            </tr>\n          </thead>\n          <tbody>\n            {challenges.map((challenge) => {\n              const completed = challenge.bronzeWinner !== '';\n              const completedGold = challenge.goldWinner !== '';\n              if (\n                (completed && hideCompletedChallenges) ||\n                (completedGold && hideCompletedGolds)\n              )\n                return null;\n\n              return (\n                <tr\n                  key={challenge.name}\n                  className={completed ? 'completed' : ''}\n                >\n                  <td>\n                    <div className=\"flex\">\n                      <img className=\"icon\" src={challenge.icon} alt=\"\" />\n                      {challenge.name}\n                    </div>\n                  </td>\n                  <td className=\"alignCenter\">{challenge.goldVal}</td>\n                  <td>{challenge.goldWinner}</td>\n                  <td className=\"alignCenter\">{challenge.silverVal}</td>\n                  <td>{challenge.silverWinner}</td>\n                  <td className=\"alignCenter\">{challenge.bronzeVal}</td>\n                  <td>{challenge.bronzeWinner}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Challenges;\n","export default __webpack_public_path__ + \"static/media/logo.870e4b4c.png\";","import React, { useEffect, useState } from 'react';\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\nimport Countdown from './components/Countdown/Countdown';\nimport Leaderboard from './components/Leaderboard';\nimport Achievements from './components/Achievements';\nimport Challenges from './components/Challenges';\nimport Logo from './assets/logo.png';\nimport './App.scss';\n\nconst password = 'theobaby';\n\n// Note that when it's regular (non-daylight savings) time it should be GMT-0800. Otherwise GMT-0700.\n// Make sure to use military time\nconst startTime = Date.parse('August 10, 2025 17:30:00 GMT-0700');\nconst endTime = Date.parse('August 10, 2025 20:00:00 GMT-0700');\n\nconst App = () => {\n  const [leaderboard, setLeaderboard] = useState([]);\n  const [achievements, setAchievements] = useState([]);\n  const [challenges, setChallenges] = useState([]);\n  const [passwordInput, setPasswordInput] = useState('');\n  const [locked, setLocked] = useState(Date.now() < startTime);\n\n  useEffect(() => {\n    // Initialize the sheet - doc ID is the long id in the sheets URL\n    const doc = new GoogleSpreadsheet(\n      '1Ro0dAbWXEqr9V_EcxXC72oW9jA4RQC1aBK6mM5sqw5k'\n    );\n    const creds = require('./config/creds.json'); // file with api key\n\n    const fetchData = async () => {\n      await doc.useServiceAccountAuth(creds);\n      await doc.loadInfo(); // loads document properties and worksheets\n\n      const leaderboardSheet = doc.sheetsByIndex[0];\n      const playerRows = await leaderboardSheet.getRows();\n      setLeaderboard(\n        playerRows\n          .map((row) => ({\n            name: row.Name,\n            points: row.Points,\n            avatar: row.Avatar,\n            lockedGames: row['Locked Games'],\n          }))\n          .sort((a, b) => b.points - a.points)\n      );\n\n      const achievementsSheet = doc.sheetsByIndex[2];\n      const achievementsRows = await achievementsSheet.getRows();\n      setAchievements(\n        achievementsRows.map((row) => ({\n          description: row.Description,\n          icon: row.Icon,\n          points: row.Points,\n          currentHolder: row['Current holder'],\n        }))\n      );\n\n      const challengesSheet = doc.sheetsByIndex[1];\n      const challengeRows = await challengesSheet.getRows();\n      setChallenges(\n        challengeRows.map((row) => ({\n          name: row['Challenge Name'],\n          type: row['Challenge Type'],\n          icon: row['Challenge Icon'],\n          goldVal: row['Gold Point Value'],\n          goldWinner: row['Gold Winner Name'] ?? '',\n          silverVal: row['Silver Point Value'],\n          silverWinner: row['Silver Winner Name'] ?? '',\n          bronzeVal: row['Bronze Point Value'],\n          bronzeWinner: row['Bronze Winner Name'] ?? '',\n        }))\n      );\n    };\n\n    fetchData();\n    const interval = setInterval(fetchData, 10000); // pull data every 10 seconds\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <img src={Logo} className=\"logo\" alt=\"Olympic rings logo\" />\n        <h1>Video Game Olympics</h1>\n      </div>\n\n      {locked ? (\n        <div className=\"password\">\n          <input\n            type=\"password\"\n            onChange={(e) => setPasswordInput(e.target.value)}\n            value={passwordInput}\n          />\n          <button onClick={() => setLocked(!(passwordInput === password))}>\n            Submit\n          </button>\n        </div>\n      ) : leaderboard.length > 0 && challenges.length > 0 ? (\n        <>\n          <Countdown\n            startTime={startTime}\n            endTime={endTime}\n            winner={leaderboard[0]?.name}\n          />\n          <Leaderboard leaderboard={leaderboard} />\n          <Achievements achievements={achievements} leaderboard={leaderboard} />\n          <Challenges challenges={challenges} />\n        </>\n      ) : (\n        <h2 className=\"loading\">Loading...</h2>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}