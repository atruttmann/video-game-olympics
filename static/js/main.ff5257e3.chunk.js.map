{"version":3,"sources":["Countdown.js","logo.jpg","App.js","index.js"],"names":["Countdown","winner","useState","days","setDays","hours","setHours","minutes","setMinutes","seconds","setSeconds","gameOver","setGameOver","useEffect","startTime","Date","parse","endTime","updateClock","currentTime","now","t","getTime","Math","floor","interval","setInterval","clearInterval","getFormattedTime","time","className","App","leaderboard","setLeaderboard","challenges","setChallenges","doc","GoogleSpreadsheet","creds","require","fetchData","a","useServiceAccountAuth","loadInfo","leaderboardSheet","sheetsByIndex","getRows","playerRows","map","row","name","Name","points","Points","avatar","Avatar","sort","b","challengesSheet","challengeRows","type","goldVal","goldWinner","silverVal","silverWinner","getMedal","index","checkIfCompleted","challenge","src","Logo","alt","player","topChallenges","filter","forEach","slice","getTopChallenges","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ff5257e3.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst Countdown = ({ winner }) => {\r\n  const [days, setDays] = useState();\r\n  const [hours, setHours] = useState();\r\n  const [minutes, setMinutes] = useState();\r\n  const [seconds, setSeconds] = useState();\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Note that when it's regular (non-daylight savings) time it should be GMT-0800\r\n    const startTime = Date.parse(\"Oct 2, 2021 12:00:00 GMT-0700\");\r\n    const endTime = Date.parse(\"Oct 2, 2021 4:00:00 GMT-0700\");\r\n\r\n    const updateClock = () => {\r\n      const currentTime = Date.now();\r\n\r\n      if (currentTime > endTime) {\r\n        setGameOver(true);\r\n      } else {\r\n        let deadline;\r\n        if (currentTime < startTime) {\r\n          deadline = startTime;\r\n        } else {\r\n          deadline = endTime;\r\n        }\r\n\r\n        const t = deadline - new Date().getTime();\r\n        const seconds = Math.floor((t / 1000) % 60);\r\n        const minutes = Math.floor((t / 1000 / 60) % 60);\r\n        const hours = Math.floor((t / (1000 * 60 * 60)) % 24);\r\n        const days = Math.floor(t / (1000 * 60 * 60 * 24));\r\n\r\n        setDays(days);\r\n        setHours(hours);\r\n        setMinutes(minutes);\r\n        setSeconds(seconds);\r\n      }\r\n    };\r\n\r\n    updateClock();\r\n    const interval = setInterval(updateClock, 1000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  const getFormattedTime = (time) => {\r\n    if (time < 10) return `0${time}`;\r\n    return time;\r\n  };\r\n\r\n  if (gameOver) {\r\n    return (\r\n      <div className=\"countdown\">\r\n        <h2 className=\"gameOver\">{`Game over! ${winner} claims victory ðŸ‘‘`}</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"countdown\">\r\n      {days > 0 && (\r\n        <div className=\"timeItem\">\r\n          <div className=\"time\">{days}</div>\r\n          Days\r\n        </div>\r\n      )}\r\n      <div className=\"timeItem\">\r\n        <div className=\"time\">{getFormattedTime(hours)}</div>\r\n        Hours\r\n      </div>\r\n      <div className=\"timeItem\">\r\n        <div className=\"time\">{getFormattedTime(minutes)}</div>\r\n        Minutes\r\n      </div>\r\n      <div className=\"timeItem\">\r\n        <div className=\"time\">{getFormattedTime(seconds)}</div>\r\n        Seconds\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countdown;\r\n","export default __webpack_public_path__ + \"static/media/logo.7fa2e432.jpg\";","import { useEffect, useState } from \"react\";\r\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\r\nimport Countdown from \"./Countdown\";\r\nimport Logo from \"./logo.jpg\";\r\nimport \"./App.scss\";\r\n\r\nconst App = () => {\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [challenges, setChallenges] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Initialize the sheet - doc ID is the long id in the sheets URL\r\n    const doc = new GoogleSpreadsheet(\r\n      \"1OuBG8d4xZtw8utOVonv4O3bXJtxcoLnGv-o2TOplDCY\"\r\n    );\r\n    const creds = require(\"./config/video-game-olympics-a99675815598.json\"); // file with api key\r\n\r\n    const fetchData = async () => {\r\n      await doc.useServiceAccountAuth(creds);\r\n      await doc.loadInfo(); // loads document properties and worksheets\r\n\r\n      const leaderboardSheet = doc.sheetsByIndex[0];\r\n      const playerRows = await leaderboardSheet.getRows();\r\n      setLeaderboard(\r\n        playerRows\r\n          .map((row) => ({\r\n            name: row.Name,\r\n            points: row.Points,\r\n            avatar: row.Avatar,\r\n          }))\r\n          .sort((a, b) => b.points - a.points)\r\n      );\r\n\r\n      const challengesSheet = doc.sheetsByIndex[1];\r\n      const challengeRows = await challengesSheet.getRows();\r\n      setChallenges(\r\n        challengeRows.map((row) => ({\r\n          name: row[\"Challenge Name\"],\r\n          type: row[\"Challenge Type\"],\r\n          goldVal: row[\"Gold Point Value\"],\r\n          goldWinner: row[\"Gold Winner Name\"] ?? \"\",\r\n          silverVal: row[\"Silver Point Value\"],\r\n          silverWinner: row[\"Silver Winner Name\"] ?? \"\",\r\n        }))\r\n      );\r\n    };\r\n\r\n    fetchData();\r\n    const interval = setInterval(fetchData, 5000); // pull data every 5 seconds\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  const getMedal = (index) => {\r\n    switch (index) {\r\n      case 0:\r\n        return \"ðŸ¥‡\";\r\n      case 1:\r\n        return \"ðŸ¥ˆ\";\r\n      case 2:\r\n        return \"ðŸ¥‰\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const checkIfCompleted = (challenge) => {\r\n    if (challenge.silverWinner !== \"\") return \"completed\";\r\n    return \"\";\r\n  };\r\n\r\n  const getTopChallenges = () => {\r\n    // Filter out any completed challenges\r\n    let topChallenges = challenges.filter(\r\n      (challenge) =>\r\n        !(challenge.goldWinner !== \"\" && challenge.silverWinner !== \"\")\r\n    );\r\n\r\n    // Figure out how many points each challenge has,\r\n    // accounting for if there is a gold winner\r\n    topChallenges.forEach((challenge) => {\r\n      let points = challenge.goldVal;\r\n      if (challenge.goldWinner !== \"\") points = challenge.silverVal;\r\n      challenge.points = points;\r\n    });\r\n\r\n    // Sort challenges by points\r\n    topChallenges.sort((a, b) => b.points - a.points);\r\n\r\n    // Return top 5 challenges\r\n    return topChallenges.slice(0, 5);\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"header\">\r\n        <img src={Logo} className=\"logo\" alt=\"Olympic rings logo\" />\r\n        <h1>Video Game Olympics</h1>\r\n      </div>\r\n\r\n      <Countdown winner={leaderboard[0]?.name} />\r\n\r\n      <div className=\"twoColumn\">\r\n        <div>\r\n          <h2>Leaderboard</h2>\r\n          <table className=\"leaderboard\">\r\n            <thead>\r\n              <tr>\r\n                <th>Player</th>\r\n                <th className=\"points\">Points</th>\r\n                <th />\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {leaderboard.map((player, index) => (\r\n                <tr key={player.name}>\r\n                  <td className=\"playerName\">\r\n                    <img\r\n                      className=\"avatar\"\r\n                      src={player.avatar}\r\n                      alt=\"Player avatar\"\r\n                    />\r\n                    {player.name}\r\n                  </td>\r\n                  <td className=\"alignCenter points\">{player.points}</td>\r\n                  <td className=\"medal\">{getMedal(index)}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        <div>\r\n          <h2>Top challenges</h2>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Challenge Name</th>\r\n                <th>Points</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {getTopChallenges().map((challenge) => (\r\n                <tr key={challenge.name}>\r\n                  <td>{challenge.name}</td>\r\n                  <td className=\"alignCenter\">{challenge.points}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      <h2>All challenges</h2>\r\n      <table className=\"challenges\">\r\n        <thead>\r\n          <tr>\r\n            <th>Challenge Name</th>\r\n            <th>ðŸ¥‡ Points</th>\r\n            <th>ðŸ¥‡ Winner</th>\r\n            <th>ðŸ¥ˆ Points</th>\r\n            <th>ðŸ¥ˆ Winner</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {challenges.map((challenge) => (\r\n            <tr key={challenge.name} className={checkIfCompleted(challenge)}>\r\n              <td>{challenge.name}</td>\r\n              <td className=\"alignCenter\">{challenge.goldVal}</td>\r\n              <td className=\"alignCenter\">{challenge.goldWinner}</td>\r\n              <td className=\"alignCenter\">{challenge.silverVal}</td>\r\n              <td className=\"alignCenter\">{challenge.silverWinner}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}