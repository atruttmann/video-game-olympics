{"version":3,"sources":["Countdown.js","logo.jpg","App.js","index.js"],"names":["Countdown","winner","useState","hours","setHours","minutes","setMinutes","seconds","setSeconds","customStatus","setCustomStatus","useEffect","startTime","Date","parse","endTime","updateClock","currentTime","now","t","getTime","Math","floor","interval","setInterval","clearInterval","getFormattedTime","time","className","App","leaderboard","setLeaderboard","challenges","setChallenges","doc","GoogleSpreadsheet","creds","require","fetchData","a","useServiceAccountAuth","loadInfo","leaderboardSheet","sheetsByIndex","getRows","playerRows","map","row","name","Name","points","Points","avatar","Avatar","lockedGames","sort","b","challengesSheet","challengeRows","type","goldVal","goldWinner","silverVal","silverWinner","bronzeVal","bronzeWinner","getMedal","index","checkIfCompleted","challenge","src","Logo","alt","player","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7a6f3fd.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst Countdown = ({ winner }) => {\r\n  const [hours, setHours] = useState();\r\n  const [minutes, setMinutes] = useState();\r\n  const [seconds, setSeconds] = useState();\r\n  const [customStatus, setCustomStatus] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Note that when it's regular (non-daylight savings) time it should be GMT-0800\r\n    // Make sure to use military time\r\n    const startTime = Date.parse(\"Oct 10, 2021 17:30:00 GMT-0700\");\r\n    const endTime = Date.parse(\"Oct 10, 2021 19:30:00 GMT-0700\");\r\n\r\n    const updateClock = () => {\r\n      const currentTime = Date.now();\r\n\r\n      if (currentTime < startTime) {\r\n        setCustomStatus(\"Game has not started.\");\r\n      } else if (currentTime > endTime) {\r\n        setCustomStatus(`Game over!${winner ? ` ${winner} wines.` : \"\"}`);\r\n      } else {\r\n        const t = endTime - new Date().getTime();\r\n        const seconds = Math.floor((t / 1000) % 60);\r\n        const minutes = Math.floor((t / 1000 / 60) % 60);\r\n        const hours = Math.floor((t / (1000 * 60 * 60)) % 24);\r\n\r\n        setHours(hours);\r\n        setMinutes(minutes);\r\n        setSeconds(seconds);\r\n        setCustomStatus(null);\r\n      }\r\n    };\r\n\r\n    updateClock();\r\n    const interval = setInterval(updateClock, 1000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [winner]);\r\n\r\n  const getFormattedTime = (time) => {\r\n    if (time < 10) return `0${time}`;\r\n    return time;\r\n  };\r\n\r\n  if (customStatus) {\r\n    return (\r\n      <div className=\"countdown\">\r\n        <h2 className=\"customStatus\">{customStatus}</h2>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"countdown\">\r\n      <div className=\"timeItem\">\r\n        <div className=\"time\">{getFormattedTime(hours)}</div>\r\n        Hours\r\n      </div>\r\n      <div className=\"timeItem\">\r\n        <div className=\"time\">{getFormattedTime(minutes)}</div>\r\n        Minutes\r\n      </div>\r\n      <div className=\"timeItem\">\r\n        <div className=\"time\">{getFormattedTime(seconds)}</div>\r\n        Seconds\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countdown;\r\n","export default __webpack_public_path__ + \"static/media/logo.7fa2e432.jpg\";","import { useEffect, useState } from \"react\";\r\nimport { GoogleSpreadsheet } from \"google-spreadsheet\";\r\nimport Countdown from \"./Countdown\";\r\nimport Logo from \"./logo.jpg\";\r\nimport \"./App.scss\";\r\n\r\nconst App = () => {\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [challenges, setChallenges] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Initialize the sheet - doc ID is the long id in the sheets URL\r\n    const doc = new GoogleSpreadsheet(\r\n      \"1OuBG8d4xZtw8utOVonv4O3bXJtxcoLnGv-o2TOplDCY\"\r\n    );\r\n    const creds = require(\"./config/video-game-olympics-a99675815598.json\"); // file with api key\r\n\r\n    const fetchData = async () => {\r\n      await doc.useServiceAccountAuth(creds);\r\n      await doc.loadInfo(); // loads document properties and worksheets\r\n\r\n      const leaderboardSheet = doc.sheetsByIndex[0];\r\n      const playerRows = await leaderboardSheet.getRows();\r\n      setLeaderboard(\r\n        playerRows\r\n          .map((row) => ({\r\n            name: row.Name,\r\n            points: row.Points,\r\n            avatar: row.Avatar,\r\n            lockedGames: row[\"Locked Games\"],\r\n          }))\r\n          .sort((a, b) => b.points - a.points)\r\n      );\r\n\r\n      const challengesSheet = doc.sheetsByIndex[1];\r\n      const challengeRows = await challengesSheet.getRows();\r\n      setChallenges(\r\n        challengeRows.map((row) => ({\r\n          name: row[\"Challenge Name\"],\r\n          type: row[\"Challenge Type\"],\r\n          goldVal: row[\"Gold Point Value\"],\r\n          goldWinner: row[\"Gold Winner Name\"] ?? \"\",\r\n          silverVal: row[\"Silver Point Value\"],\r\n          silverWinner: row[\"Silver Winner Name\"] ?? \"\",\r\n          bronzeVal: row[\"Bronze Point Value\"],\r\n          bronzeWinner: row[\"Bronze Winner Name\"] ?? \"\",\r\n        }))\r\n      );\r\n    };\r\n\r\n    fetchData();\r\n    const interval = setInterval(fetchData, 5000); // pull data every 5 seconds\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  const getMedal = (index) => {\r\n    switch (index) {\r\n      case 0:\r\n        return \"ðŸ¥‡\";\r\n      case 1:\r\n        return \"ðŸ¥ˆ\";\r\n      case 2:\r\n        return \"ðŸ¥‰\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  const checkIfCompleted = (challenge) => {\r\n    if (challenge.silverWinner !== \"\") return \"completed\";\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"header\">\r\n        <img src={Logo} className=\"logo\" alt=\"Olympic rings logo\" />\r\n        <h1>Video Game Olympics</h1>\r\n      </div>\r\n\r\n      <Countdown winner={leaderboard[0]?.name} />\r\n\r\n      <div className=\"leaderboard\">\r\n        <h2>Leaderboard</h2>\r\n        <div className=\"tableContainer\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th className=\"medal\" />\r\n                <th className=\"points\">Points</th>\r\n                <th>Player</th>\r\n                <th>Locked Games</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {leaderboard.map((player, index) => (\r\n                <tr key={player.name}>\r\n                  <td className=\"medal\">\r\n                    {player.points > 0 && getMedal(index)}\r\n                  </td>\r\n                  <td className=\"alignCenter points\">{player.points}</td>\r\n                  <td>\r\n                    <div className=\"playerName\">\r\n                      <img\r\n                        className=\"avatar\"\r\n                        src={player.avatar}\r\n                        alt=\"Player avatar\"\r\n                      />\r\n                      {player.name}\r\n                    </div>\r\n                  </td>\r\n                  <td>{player.lockedGames}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"challenges\">\r\n        <h2>All challenges</h2>\r\n        <div className=\"tableContainer\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>Challenge Name</th>\r\n                <th>ðŸ¥‡</th>\r\n                <th>Winner</th>\r\n                <th>ðŸ¥ˆ</th>\r\n                <th>Winner</th>\r\n                <th>ðŸ¥‰</th>\r\n                <th>Winner</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {challenges.map((challenge) => (\r\n                <tr\r\n                  key={challenge.name}\r\n                  className={checkIfCompleted(challenge)}\r\n                >\r\n                  <td>{challenge.name}</td>\r\n                  <td className=\"alignCenter\">{challenge.goldVal}</td>\r\n                  <td className=\"alignCenter\">{challenge.goldWinner}</td>\r\n                  <td className=\"alignCenter\">{challenge.silverVal}</td>\r\n                  <td className=\"alignCenter\">{challenge.silverWinner}</td>\r\n                  <td className=\"alignCenter\">{challenge.bronzeVal}</td>\r\n                  <td className=\"alignCenter\">{challenge.bronzeWinner}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}