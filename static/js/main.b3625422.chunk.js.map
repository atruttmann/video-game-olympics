{"version":3,"sources":["components/Countdown/Countdown.js","components/Leaderboard.js","components/Achievements.js","components/Switch/Switch.js","components/Challenges.js","assets/logo.png","App.js","index.js"],"names":["Countdown","startTime","endTime","winner","useState","hours","setHours","minutes","setMinutes","seconds","setSeconds","customStatus","setCustomStatus","useEffect","updateClock","currentTime","Date","now","t","getTime","Math","floor","interval","setInterval","clearInterval","getFormattedTime","time","className","Leaderboard","leaderboard","getMedal","index","map","player","points","src","avatar","alt","name","lockedGames","Achievements","achievements","getPlayerAvatar","playerName","find","achievement","icon","description","currentHolder","Switch","toggleSwitch","children","type","onClick","Challenges","challenges","hideCompletedChallenges","setHideCompletedChallenges","challenge","completed","bronzeWinner","goldVal","goldWinner","silverVal","silverWinner","bronzeVal","parse","App","setLeaderboard","setAchievements","setChallenges","passwordInput","setPasswordInput","locked","setLocked","doc","GoogleSpreadsheet","creds","require","fetchData","a","useServiceAccountAuth","loadInfo","leaderboardSheet","sheetsByIndex","getRows","playerRows","row","Name","Points","Avatar","sort","b","achievementsSheet","achievementsRows","Description","Icon","challengesSheet","challengeRows","Logo","onChange","e","target","value","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kzFAkEeA,EA/DG,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAAa,EAC1BC,qBAD0B,mBAC7CC,EAD6C,KACtCC,EADsC,OAEtBF,qBAFsB,mBAE7CG,EAF6C,KAEpCC,EAFoC,OAGtBJ,qBAHsB,mBAG7CK,EAH6C,KAGpCC,EAHoC,OAIZN,mBAAS,KAJG,mBAI7CO,EAJ6C,KAI/BC,EAJ+B,KAMpDC,qBAAU,WACR,IAAMC,EAAc,WAClB,IAAMC,EAAcC,KAAKC,MAEzB,GAAIF,EAAcd,EAChBW,EAAgB,8BACX,GAAIG,EAAcb,EACvBU,EAAgB,aAAD,OAAcT,EAAM,WAAOA,EAAP,UAAwB,SACtD,CACL,IAAMe,EAAIhB,GAAU,IAAIc,MAAOG,UACzBV,EAAUW,KAAKC,MAAOH,EAAI,IAAQ,IAClCX,EAAUa,KAAKC,MAAOH,EAAI,IAAO,GAAM,IACvCb,EAAQe,KAAKC,MAAOH,EAAC,KAAuB,IAElDZ,EAASD,GACTG,EAAWD,GACXG,EAAWD,GACXG,EAAgB,QAIpBE,IACA,IAAMQ,EAAWC,YAAYT,EAAa,KAC1C,OAAO,WACLU,cAAcF,MAEf,CAACnB,EAAQF,EAAWC,IAEvB,IAAMuB,EAAmB,SAACC,GACxB,OAAIA,EAAO,GAAU,IAAN,OAAWA,GACnBA,GAGT,OACE,qBAAKC,UAAU,oBAAf,SACGhB,EACC,oBAAIgB,UAAU,eAAd,SAA8BhB,IAE9B,qCACE,sBAAKgB,UAAU,WAAf,UACE,qBAAKA,UAAU,OAAf,SAAuBF,EAAiBpB,KAD1C,WAIA,sBAAKsB,UAAU,WAAf,UACE,qBAAKA,UAAU,OAAf,SAAuBF,EAAiBlB,KAD1C,aAIA,sBAAKoB,UAAU,WAAf,UACE,qBAAKA,UAAU,OAAf,SAAuBF,EAAiBhB,KAD1C,mBCDKmB,G,MApDK,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACfC,EAAW,SAACC,GAChB,OAAQA,GACN,KAAK,EACH,MAAO,eACT,KAAK,EACH,MAAO,eACT,KAAK,EACH,MAAO,eACT,QACE,MAAO,KAIb,OACE,sBAAKJ,UAAU,sBAAf,UACE,6CACA,qBAAKA,UAAU,iBAAf,SACE,kCACE,gCACE,+BACE,oBAAIA,UAAU,UACd,oBAAIA,UAAU,SAAd,oBACA,wCACA,gEAGJ,gCACGE,EAAYG,KAAI,SAACC,EAAQF,GAAT,OACf,+BACE,oBAAIJ,UAAU,QAAd,SACGM,EAAOC,OAAS,GAAKJ,EAASC,KAEjC,oBAAIJ,UAAU,qBAAd,SAAoCM,EAAOC,SAC3C,6BACE,sBAAKP,UAAU,OAAf,UACE,qBAAKA,UAAU,SAASQ,IAAKF,EAAOG,OAAQC,IAAI,KAC/CJ,EAAOK,UAGZ,oBAAIX,UAAU,QAAd,SACE,4BAAIM,EAAOM,kBAZNN,EAAOK,qBCqBfE,EAlDM,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,aAAcZ,EAAkB,EAAlBA,YAC9Ba,EAAkB,SAACC,GACvB,IAAMV,EAASJ,EAAYe,MAAK,SAACX,GAAD,OAAYA,EAAOK,OAASK,KAC5D,OAAIV,EAAeA,EAAOG,OACnB,IAGT,OACE,sBAAKT,UAAU,UAAf,UACE,8CACA,qBAAKA,UAAU,iBAAf,SACE,kCACE,gCACE,+BACE,6CACA,oBAAIA,UAAU,SAAd,oBACA,qDAGJ,gCACGc,EAAaT,KAAI,SAACa,GAAD,OAChB,+BACE,6BACE,sBAAKlB,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAOQ,IAAKU,EAAYC,KAAMT,IAAI,KAChDQ,EAAYE,iBAGjB,oBAAIpB,UAAU,qBAAd,SAAoCkB,EAAYX,SAChD,6BACGW,EAAYG,eACX,sBAAKrB,UAAU,OAAf,UACE,qBACEA,UAAU,SACVQ,IAAKO,EAAgBG,EAAYG,eACjCX,IAAI,KAELQ,EAAYG,qBAhBZH,EAAYE,2BCXpBE,G,OAVA,SAAC,GAAD,QAAGC,oBAAH,MAAkB,aAAlB,EAA4BC,EAA5B,EAA4BA,SAA5B,OACb,sBAAKxB,UAAU,kBAAf,UACE,wBAAOA,UAAU,SAAjB,UACE,uBAAOyB,KAAK,WAAWC,QAAS,kBAAMH,OACtC,sBAAMvB,UAAU,cAElB,+BAAOwB,SCqDIG,EA1DI,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACyBnD,oBAAS,GADlC,mBAC9BoD,EAD8B,KACLC,EADK,KAGrC,OACE,sBAAK9B,UAAU,qBAAf,UACE,4CACA,cAAC,EAAD,CACEuB,aAAc,kBACZO,GAA4BD,IAFhC,uCAOA,qBAAK7B,UAAU,iBAAf,SACE,kCACE,gCACE,+BACE,gDACA,oBAAIA,UAAU,cAAd,0BACA,wCACA,oBAAIA,UAAU,cAAd,0BACA,wCACA,oBAAIA,UAAU,cAAd,0BACA,6CAGJ,gCACG4B,EAAWvB,KAAI,SAAC0B,GACf,IAAMC,EAAuC,KAA3BD,EAAUE,aAC5B,OAAID,GAAaH,EAAgC,KAG/C,qBAEE7B,UAAWgC,EAAY,YAAc,GAFvC,UAIE,6BACE,sBAAKhC,UAAU,OAAf,UACE,qBAAKA,UAAU,OAAOQ,IAAKuB,EAAUZ,KAAMT,IAAI,KAC9CqB,EAAUpB,UAGf,oBAAIX,UAAU,cAAd,SAA6B+B,EAAUG,UACvC,6BAAKH,EAAUI,aACf,oBAAInC,UAAU,cAAd,SAA6B+B,EAAUK,YACvC,6BAAKL,EAAUM,eACf,oBAAIrC,UAAU,cAAd,SAA6B+B,EAAUO,YACvC,6BAAKP,EAAUE,iBAdVF,EAAUpB,oBCrClB,MAA0B,iCCanCrC,G,OAAYe,KAAKkD,MAAM,sCACvBhE,EAAUc,KAAKkD,MAAM,qCAwGZC,EAtGH,WAAO,IAAD,IACsB/D,mBAAS,IAD/B,mBACTyB,EADS,KACIuC,EADJ,OAEwBhE,mBAAS,IAFjC,mBAETqC,EAFS,KAEK4B,EAFL,OAGoBjE,mBAAS,IAH7B,mBAGTmD,EAHS,KAGGe,EAHH,OAI0BlE,mBAAS,IAJnC,mBAITmE,EAJS,KAIMC,EAJN,OAKYpE,mBAASY,KAAKC,MAAQhB,GALlC,mBAKTwE,EALS,KAKDC,EALC,KAkEhB,OA3DA7D,qBAAU,WAER,IAAM8D,EAAM,IAAIC,oBACd,gDAEIC,EAAQC,EAAQ,KAEhBC,EAAS,uCAAG,sCAAAC,EAAA,sEACVL,EAAIM,sBAAsBJ,GADhB,uBAEVF,EAAIO,WAFM,cAIVC,EAAmBR,EAAIS,cAAc,GAJ3B,SAKSD,EAAiBE,UAL1B,cAKVC,EALU,OAMhBlB,EACEkB,EACGtD,KAAI,SAACuD,GAAD,MAAU,CACbjD,KAAMiD,EAAIC,KACVtD,OAAQqD,EAAIE,OACZrD,OAAQmD,EAAIG,OACZnD,YAAagD,EAAI,oBAElBI,MAAK,SAACX,EAAGY,GAAJ,OAAUA,EAAE1D,OAAS8C,EAAE9C,WAG3B2D,EAAoBlB,EAAIS,cAAc,GAjB5B,UAkBeS,EAAkBR,UAlBjC,eAkBVS,EAlBU,OAmBhBzB,EACEyB,EAAiB9D,KAAI,SAACuD,GAAD,MAAU,CAC7BxC,YAAawC,EAAIQ,YACjBjD,KAAMyC,EAAIS,KACV9D,OAAQqD,EAAIE,OACZzC,cAAeuC,EAAI,uBAIjBU,EAAkBtB,EAAIS,cAAc,GA5B1B,UA6BYa,EAAgBZ,UA7B5B,QA6BVa,EA7BU,OA8BhB5B,EACE4B,EAAclE,KAAI,SAACuD,GAAD,gBAAU,CAC1BjD,KAAMiD,EAAI,kBACVnC,KAAMmC,EAAI,kBACVzC,KAAMyC,EAAI,kBACV1B,QAAS0B,EAAI,oBACbzB,WAAU,UAAEyB,EAAI,2BAAN,QAA6B,GACvCxB,UAAWwB,EAAI,sBACfvB,aAAY,UAAEuB,EAAI,6BAAN,QAA+B,GAC3CtB,UAAWsB,EAAI,sBACf3B,aAAY,UAAE2B,EAAI,6BAAN,QAA+B,QAxC/B,4CAAH,qDA6CfR,IACA,IAAMzD,EAAWC,YAAYwD,EAAW,KACxC,OAAO,WACLvD,cAAcF,MAEf,IAGD,sBAAKK,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,qBAAKQ,IAAKgE,EAAMxE,UAAU,OAAOU,IAAI,uBACrC,wDAGDoC,EACC,sBAAK9C,UAAU,WAAf,UACE,uBACEyB,KAAK,WACLgD,SAAU,SAACC,GAAD,OAAO7B,EAAiB6B,EAAEC,OAAOC,QAC3CA,MAAOhC,IAET,wBAAQlB,QAAS,kBAAMqB,IAvFhB,aAuF4BH,KAAnC,uBAIA1C,EAAY2E,OAAS,GAAKjD,EAAWiD,OAAS,EAChD,qCACE,cAAC,EAAD,CACEvG,UAAWA,EACXC,QAASA,EACTC,OAAM,UAAE0B,EAAY,UAAd,aAAE,EAAgBS,OAE1B,cAAC,EAAD,CAAaT,YAAaA,IAC1B,cAAC,EAAD,CAAcY,aAAcA,EAAcZ,YAAaA,IACvD,cAAC,EAAD,CAAY0B,WAAYA,OAG1B,oBAAI5B,UAAU,UAAd,4BC5GR8E,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.b3625422.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport \"./Countdown.scss\";\r\n\r\nconst Countdown = ({ startTime, endTime, winner }) => {\r\n  const [hours, setHours] = useState();\r\n  const [minutes, setMinutes] = useState();\r\n  const [seconds, setSeconds] = useState();\r\n  const [customStatus, setCustomStatus] = useState(\" \");\r\n\r\n  useEffect(() => {\r\n    const updateClock = () => {\r\n      const currentTime = Date.now();\r\n\r\n      if (currentTime < startTime) {\r\n        setCustomStatus(\"Game has not started.\");\r\n      } else if (currentTime > endTime) {\r\n        setCustomStatus(`Game over!${winner ? ` ${winner} wins.` : \"\"}`);\r\n      } else {\r\n        const t = endTime - new Date().getTime();\r\n        const seconds = Math.floor((t / 1000) % 60);\r\n        const minutes = Math.floor((t / 1000 / 60) % 60);\r\n        const hours = Math.floor((t / (1000 * 60 * 60)) % 24);\r\n\r\n        setHours(hours);\r\n        setMinutes(minutes);\r\n        setSeconds(seconds);\r\n        setCustomStatus(null);\r\n      }\r\n    };\r\n\r\n    updateClock();\r\n    const interval = setInterval(updateClock, 1000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [winner, startTime, endTime]);\r\n\r\n  const getFormattedTime = (time) => {\r\n    if (time < 10) return `0${time}`;\r\n    return time;\r\n  };\r\n\r\n  return (\r\n    <div className=\"countdown section\">\r\n      {customStatus ? (\r\n        <h2 className=\"customStatus\">{customStatus}</h2>\r\n      ) : (\r\n        <>\r\n          <div className=\"timeItem\">\r\n            <div className=\"time\">{getFormattedTime(hours)}</div>\r\n            Hours\r\n          </div>\r\n          <div className=\"timeItem\">\r\n            <div className=\"time\">{getFormattedTime(minutes)}</div>\r\n            Minutes\r\n          </div>\r\n          <div className=\"timeItem\">\r\n            <div className=\"time\">{getFormattedTime(seconds)}</div>\r\n            Seconds\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Countdown;\r\n","import React from \"react\";\r\nimport \"./TableStyles.scss\";\r\n\r\nconst Leaderboard = ({ leaderboard }) => {\r\n  const getMedal = (index) => {\r\n    switch (index) {\r\n      case 0:\r\n        return \"ðŸ¥‡\";\r\n      case 1:\r\n        return \"ðŸ¥ˆ\";\r\n      case 2:\r\n        return \"ðŸ¥‰\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"leaderboard section\">\r\n      <h2>Leaderboard</h2>\r\n      <div className=\"tableContainer\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th className=\"medal\" />\r\n              <th className=\"points\">Points</th>\r\n              <th>Player</th>\r\n              <th>ðŸ”’ Locked Games</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {leaderboard.map((player, index) => (\r\n              <tr key={player.name}>\r\n                <td className=\"medal\">\r\n                  {player.points > 0 && getMedal(index)}\r\n                </td>\r\n                <td className=\"alignCenter points\">{player.points}</td>\r\n                <td>\r\n                  <div className=\"flex\">\r\n                    <img className=\"avatar\" src={player.avatar} alt=\"\" />\r\n                    {player.name}\r\n                  </div>\r\n                </td>\r\n                <td className=\"small\">\r\n                  <i>{player.lockedGames}</i>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Leaderboard;\r\n","import React from \"react\";\r\nimport \"./TableStyles.scss\";\r\n\r\nconst Achievements = ({ achievements, leaderboard }) => {\r\n  const getPlayerAvatar = (playerName) => {\r\n    const player = leaderboard.find((player) => player.name === playerName);\r\n    if (player) return player.avatar;\r\n    return \"\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"section\">\r\n      <h2>Achievements</h2>\r\n      <div className=\"tableContainer\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Description</th>\r\n              <th className=\"points\">Points</th>\r\n              <th>Current holder</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {achievements.map((achievement) => (\r\n              <tr key={achievement.description}>\r\n                <td>\r\n                  <div className=\"flex\">\r\n                    <img className=\"icon\" src={achievement.icon} alt=\"\" />\r\n                    {achievement.description}\r\n                  </div>\r\n                </td>\r\n                <td className=\"alignCenter points\">{achievement.points}</td>\r\n                <td>\r\n                  {achievement.currentHolder && (\r\n                    <div className=\"flex\">\r\n                      <img\r\n                        className=\"avatar\"\r\n                        src={getPlayerAvatar(achievement.currentHolder)}\r\n                        alt=\"\"\r\n                      />\r\n                      {achievement.currentHolder}\r\n                    </div>\r\n                  )}\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Achievements;\r\n","import React from \"react\";\r\nimport \"./Switch.scss\";\r\n\r\nconst Switch = ({ toggleSwitch = () => {}, children }) => (\r\n  <div className=\"switchContainer\">\r\n    <label className=\"switch\">\r\n      <input type=\"checkbox\" onClick={() => toggleSwitch()} />\r\n      <span className=\"slider\" />\r\n    </label>\r\n    <span>{children}</span>\r\n  </div>\r\n);\r\n\r\nexport default Switch;\r\n","import React, { useState } from \"react\";\r\nimport Switch from \"./Switch/Switch\";\r\nimport \"./TableStyles.scss\";\r\n\r\nconst Challenges = ({ challenges }) => {\r\n  const [hideCompletedChallenges, setHideCompletedChallenges] = useState(false);\r\n\r\n  return (\r\n    <div className=\"challenges section\">\r\n      <h2>Challenges</h2>\r\n      <Switch\r\n        toggleSwitch={() =>\r\n          setHideCompletedChallenges(!hideCompletedChallenges)\r\n        }\r\n      >\r\n        Hide completed challenges\r\n      </Switch>\r\n      <div className=\"tableContainer\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Challenge Name</th>\r\n              <th className=\"alignCenter\">ðŸ¥‡</th>\r\n              <th>Winner</th>\r\n              <th className=\"alignCenter\">ðŸ¥ˆ</th>\r\n              <th>Winner</th>\r\n              <th className=\"alignCenter\">ðŸ¥‰</th>\r\n              <th>Winner</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {challenges.map((challenge) => {\r\n              const completed = challenge.bronzeWinner !== \"\";\r\n              if (completed && hideCompletedChallenges) return null;\r\n\r\n              return (\r\n                <tr\r\n                  key={challenge.name}\r\n                  className={completed ? \"completed\" : \"\"}\r\n                >\r\n                  <td>\r\n                    <div className=\"flex\">\r\n                      <img className=\"icon\" src={challenge.icon} alt=\"\" />\r\n                      {challenge.name}\r\n                    </div>\r\n                  </td>\r\n                  <td className=\"alignCenter\">{challenge.goldVal}</td>\r\n                  <td>{challenge.goldWinner}</td>\r\n                  <td className=\"alignCenter\">{challenge.silverVal}</td>\r\n                  <td>{challenge.silverWinner}</td>\r\n                  <td className=\"alignCenter\">{challenge.bronzeVal}</td>\r\n                  <td>{challenge.bronzeWinner}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Challenges;\r\n","export default __webpack_public_path__ + \"static/media/logo.870e4b4c.png\";","import React, { useEffect, useState } from 'react';\r\nimport { GoogleSpreadsheet } from 'google-spreadsheet';\r\nimport Countdown from './components/Countdown/Countdown';\r\nimport Leaderboard from './components/Leaderboard';\r\nimport Achievements from './components/Achievements';\r\nimport Challenges from './components/Challenges';\r\nimport Logo from './assets/logo.png';\r\nimport './App.scss';\r\n\r\nconst password = 'theobaby';\r\n\r\n// Note that when it's regular (non-daylight savings) time it should be GMT-0800. Otherwise GMT-0700.\r\n// Make sure to use military time\r\nconst startTime = Date.parse('October 1, 2024 18:00:00 GMT-0700');\r\nconst endTime = Date.parse('October 1, 2024 20:00:00 GMT-0700');\r\n\r\nconst App = () => {\r\n  const [leaderboard, setLeaderboard] = useState([]);\r\n  const [achievements, setAchievements] = useState([]);\r\n  const [challenges, setChallenges] = useState([]);\r\n  const [passwordInput, setPasswordInput] = useState('');\r\n  const [locked, setLocked] = useState(Date.now() < startTime);\r\n\r\n  useEffect(() => {\r\n    // Initialize the sheet - doc ID is the long id in the sheets URL\r\n    const doc = new GoogleSpreadsheet(\r\n      '1Y5AIh07HlnC99gngiiJvrtgLHPkzURk5jJfgJ6gQX4Q'\r\n    );\r\n    const creds = require('./config/creds.json'); // file with api key\r\n\r\n    const fetchData = async () => {\r\n      await doc.useServiceAccountAuth(creds);\r\n      await doc.loadInfo(); // loads document properties and worksheets\r\n\r\n      const leaderboardSheet = doc.sheetsByIndex[0];\r\n      const playerRows = await leaderboardSheet.getRows();\r\n      setLeaderboard(\r\n        playerRows\r\n          .map((row) => ({\r\n            name: row.Name,\r\n            points: row.Points,\r\n            avatar: row.Avatar,\r\n            lockedGames: row['Locked Games'],\r\n          }))\r\n          .sort((a, b) => b.points - a.points)\r\n      );\r\n\r\n      const achievementsSheet = doc.sheetsByIndex[2];\r\n      const achievementsRows = await achievementsSheet.getRows();\r\n      setAchievements(\r\n        achievementsRows.map((row) => ({\r\n          description: row.Description,\r\n          icon: row.Icon,\r\n          points: row.Points,\r\n          currentHolder: row['Current holder'],\r\n        }))\r\n      );\r\n\r\n      const challengesSheet = doc.sheetsByIndex[1];\r\n      const challengeRows = await challengesSheet.getRows();\r\n      setChallenges(\r\n        challengeRows.map((row) => ({\r\n          name: row['Challenge Name'],\r\n          type: row['Challenge Type'],\r\n          icon: row['Challenge Icon'],\r\n          goldVal: row['Gold Point Value'],\r\n          goldWinner: row['Gold Winner Name'] ?? '',\r\n          silverVal: row['Silver Point Value'],\r\n          silverWinner: row['Silver Winner Name'] ?? '',\r\n          bronzeVal: row['Bronze Point Value'],\r\n          bronzeWinner: row['Bronze Winner Name'] ?? '',\r\n        }))\r\n      );\r\n    };\r\n\r\n    fetchData();\r\n    const interval = setInterval(fetchData, 10000); // pull data every 10 seconds\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"header\">\r\n        <img src={Logo} className=\"logo\" alt=\"Olympic rings logo\" />\r\n        <h1>Video Game Olympics</h1>\r\n      </div>\r\n\r\n      {locked ? (\r\n        <div className=\"password\">\r\n          <input\r\n            type=\"password\"\r\n            onChange={(e) => setPasswordInput(e.target.value)}\r\n            value={passwordInput}\r\n          />\r\n          <button onClick={() => setLocked(!(passwordInput === password))}>\r\n            Submit\r\n          </button>\r\n        </div>\r\n      ) : leaderboard.length > 0 && challenges.length > 0 ? (\r\n        <>\r\n          <Countdown\r\n            startTime={startTime}\r\n            endTime={endTime}\r\n            winner={leaderboard[0]?.name}\r\n          />\r\n          <Leaderboard leaderboard={leaderboard} />\r\n          <Achievements achievements={achievements} leaderboard={leaderboard} />\r\n          <Challenges challenges={challenges} />\r\n        </>\r\n      ) : (\r\n        <h2 className=\"loading\">Loading...</h2>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}